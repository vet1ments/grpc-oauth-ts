// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file grpcoauth/v1/user.proto (package grpcoauth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message grpcoauth.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * we
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string phone_number = 3;
   */
  phoneNumber = "";

  /**
   * @generated from field: string nickname = 4;
   */
  nickname = "";

  /**
   * @generated from field: string thumbnail = 5;
   */
  thumbnail = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.test
 */
export class test extends Message<test> {
  /**
   * @generated from field: string test = 5;
   */
  test = "";

  constructor(data?: PartialMessage<test>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.test";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "test", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): test {
    return new test().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): test {
    return new test().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): test {
    return new test().fromJsonString(jsonString, options);
  }

  static equals(a: test | PlainMessage<test> | undefined, b: test | PlainMessage<test> | undefined): boolean {
    return proto3.util.equals(test, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.GetAccessTokenInfoResponse
 */
export class GetAccessTokenInfoResponse extends Message<GetAccessTokenInfoResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 expires_in = 2;
   */
  expiresIn = protoInt64.zero;

  /**
   * @generated from field: string app_id = 3;
   */
  appId = "";

  constructor(data?: PartialMessage<GetAccessTokenInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.GetAccessTokenInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expires_in", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccessTokenInfoResponse {
    return new GetAccessTokenInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccessTokenInfoResponse {
    return new GetAccessTokenInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccessTokenInfoResponse {
    return new GetAccessTokenInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccessTokenInfoResponse | PlainMessage<GetAccessTokenInfoResponse> | undefined, b: GetAccessTokenInfoResponse | PlainMessage<GetAccessTokenInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetAccessTokenInfoResponse, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.GetUserMeResponse
 */
export class GetUserMeResponse extends Message<GetUserMeResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string phone_number = 3;
   */
  phoneNumber = "";

  /**
   * @generated from field: string nickname = 4;
   */
  nickname = "";

  constructor(data?: PartialMessage<GetUserMeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.GetUserMeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserMeResponse {
    return new GetUserMeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserMeResponse {
    return new GetUserMeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserMeResponse {
    return new GetUserMeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserMeResponse | PlainMessage<GetUserMeResponse> | undefined, b: GetUserMeResponse | PlainMessage<GetUserMeResponse> | undefined): boolean {
    return proto3.util.equals(GetUserMeResponse, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.UserLogoutResponse
 */
export class UserLogoutResponse extends Message<UserLogoutResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UserLogoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.UserLogoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserLogoutResponse {
    return new UserLogoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserLogoutResponse {
    return new UserLogoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserLogoutResponse {
    return new UserLogoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserLogoutResponse | PlainMessage<UserLogoutResponse> | undefined, b: UserLogoutResponse | PlainMessage<UserLogoutResponse> | undefined): boolean {
    return proto3.util.equals(UserLogoutResponse, a, b);
  }
}

