// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file grpcoauth/v1/oauth.proto (package grpcoauth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { RoleType } from "./enums_pb.js";

/**
 * @generated from message grpcoauth.v1.OauthApp
 */
export class OauthApp extends Message<OauthApp> {
  /**
   * @generated from field: grpcoauth.v1.RoleType role = 1;
   */
  role = RoleType.UNSPECIFIED;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string redirect_uri = 4;
   */
  redirectUri = "";

  constructor(data?: PartialMessage<OauthApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.OauthApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "enum", T: proto3.getEnumType(RoleType) },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OauthApp {
    return new OauthApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OauthApp {
    return new OauthApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OauthApp {
    return new OauthApp().fromJsonString(jsonString, options);
  }

  static equals(a: OauthApp | PlainMessage<OauthApp> | undefined, b: OauthApp | PlainMessage<OauthApp> | undefined): boolean {
    return proto3.util.equals(OauthApp, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.GetTokenRequest
 */
export class GetTokenRequest extends Message<GetTokenRequest> {
  /**
   *  grpcoauth.v1.GrantType grant_type = 1;fwewwer
   *
   * @generated from field: string grant_type = 1;
   */
  grantType = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string redirect_uri = 3;
   */
  redirectUri = "";

  /**
   * @generated from field: string code = 4;
   */
  code = "";

  /**
   * @generated from field: string client_secret = 5;
   */
  clientSecret = "";

  /**
   * @generated from field: string refresh_token = 6;
   */
  refreshToken = "";

  constructor(data?: PartialMessage<GetTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.GetTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grant_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenRequest {
    return new GetTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenRequest {
    return new GetTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenRequest {
    return new GetTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTokenRequest | PlainMessage<GetTokenRequest> | undefined, b: GetTokenRequest | PlainMessage<GetTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetTokenRequest, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.GetTokenResponse
 */
export class GetTokenResponse extends Message<GetTokenResponse> {
  /**
   * @generated from field: string token_type = 1;
   */
  tokenType = "";

  /**
   * @generated from field: string access_token = 2;
   */
  accessToken = "";

  /**
   * @generated from field: int64 expires_in = 3;
   */
  expiresIn = protoInt64.zero;

  /**
   * @generated from field: string refresh_token = 4;
   */
  refreshToken = "";

  /**
   * @generated from field: int64 refresh_token_expires_in = 5;
   */
  refreshTokenExpiresIn = protoInt64.zero;

  /**
   * @generated from field: repeated string scope = 6;
   */
  scope: string[] = [];

  constructor(data?: PartialMessage<GetTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.GetTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_in", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "refresh_token_expires_in", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTokenResponse {
    return new GetTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTokenResponse {
    return new GetTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTokenResponse {
    return new GetTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTokenResponse | PlainMessage<GetTokenResponse> | undefined, b: GetTokenResponse | PlainMessage<GetTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetTokenResponse, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.GetAuthorizeCodeRequest
 */
export class GetAuthorizeCodeRequest extends Message<GetAuthorizeCodeRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string redirect_uri = 2;
   */
  redirectUri = "";

  /**
   * @generated from field: string response_type = 3;
   */
  responseType = "";

  /**
   * @generated from field: string state = 4;
   */
  state = "";

  constructor(data?: PartialMessage<GetAuthorizeCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.GetAuthorizeCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "response_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorizeCodeRequest {
    return new GetAuthorizeCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorizeCodeRequest {
    return new GetAuthorizeCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorizeCodeRequest {
    return new GetAuthorizeCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorizeCodeRequest | PlainMessage<GetAuthorizeCodeRequest> | undefined, b: GetAuthorizeCodeRequest | PlainMessage<GetAuthorizeCodeRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthorizeCodeRequest, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.GetAuthorizeCodeResponse
 */
export class GetAuthorizeCodeResponse extends Message<GetAuthorizeCodeResponse> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<GetAuthorizeCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.GetAuthorizeCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorizeCodeResponse {
    return new GetAuthorizeCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorizeCodeResponse {
    return new GetAuthorizeCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorizeCodeResponse {
    return new GetAuthorizeCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorizeCodeResponse | PlainMessage<GetAuthorizeCodeResponse> | undefined, b: GetAuthorizeCodeResponse | PlainMessage<GetAuthorizeCodeResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthorizeCodeResponse, a, b);
  }
}

/**
 * @generated from message grpcoauth.v1.CallbackRequest
 */
export class CallbackRequest extends Message<CallbackRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<CallbackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "grpcoauth.v1.CallbackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallbackRequest {
    return new CallbackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallbackRequest {
    return new CallbackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallbackRequest {
    return new CallbackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CallbackRequest | PlainMessage<CallbackRequest> | undefined, b: CallbackRequest | PlainMessage<CallbackRequest> | undefined): boolean {
    return proto3.util.equals(CallbackRequest, a, b);
  }
}

